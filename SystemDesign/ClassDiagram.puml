@startuml ExpenseTracker - Group5

package "DOMAIN LAYER" {

    package "Entities" {
        interface EntityBase {
            +Guid Id
        }

        class User implements EntityBase {
            +string Name
            +string Email
            +string PasswordHash
            +DateTime CreatedAt
        }

        class Expense implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal Amount
            +string Description
            +string Category
            +DateTime Date
            +DateTime CreatedAt
            +boolean IsRecurrent
            +DateTime LastCalculation
        }

        class Income implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal Amount
            +string Source
            +DateTime Date
            +DateTime CreatedAt
        }

        class Budget implements EntityBase {
            +Guid UserId
            +DateTime Month
            +string Currency
            +decimal Amount
            +decimal CurrentAmount
        }

        class Goal implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal GoalAmount
            +DateTime Deadline
            +decimal CurrentAmount
            +DateTime CreatedAt
        }

    }

    package "Repositories" {
        interface IRepository<T implements EntityBase> {
            +bool Save(T item)
            +bool Update(T item)
            +bool Delete(T item)
            +T GetById(Guid itemId)
            +List<T> GetAll()
        }

        interface IUserRepository extends IRepository<User> {
            +User GetByEmail(string email)
        }

        interface IExpenseRepository extends IRepository<Expense> {
            +List<Expense> GetByDateRange(DateTime startDate, DateTime endDate)
            +List<Expense> GetByCategory(string category)
            +List<Expense> GetRecurrentExpenses()
        }

        interface IIncomeRepository extends IRepository<Income> {
            +List<Income> GetByDateRange(DateTime startDate, DateTime endDate)
            +List<Income> GetBySource(string source)
        }

        interface IBudgetRepository extends IRepository<Budget> {
            +Budget GetCurrentBudget()
            +Budget GetByMonth(DateTime month)
            +List<Budget> GetByAmountRange(decimal minAmount, decimal maxAmount)
        }

        interface IGoalRepository extends IRepository<Goal> {
            +List<Goal> GetCurrentGoals()
            +List<Goal> GetByGoalAmountRange(decimal minGoal, decimal maxGoal)
        }
    }

    package "Validators" {
        interface IValidator<T> {
            +void Validate(T entity)
        }

        interface IUserValidator extends IValidator<User> {
            +void Validate(User user)
        }

        interface IExpenseValidator extends IValidator<Expense> {
            +void Validate(Expense expense)
        }

        interface IIncomeValidator extends IValidator<Income> {
            +void Validate(Income income)
        }

        interface IBudgetValidator extends IValidator<Budget> {
            +void Validate(Budget budget)
        }

        interface IGoalValidator extends IValidator<Goal> {
            +void Validate(Goal goal)
        }
    }

    package "Utils" {
        class IEncryptor {
            + Encrypt(string text)
            + Decrypt(string text)
        }

        interface ITokenHandler {
            +string GenerateToken(User user)
        }

        interface IUserNotificator {
            +void NotifyUser(User user, string message)
        }
    }

}

package "APLICATION LAYER" {
    package "Repositories" {
        class UserRepository {
        }

        class ExpenseRepository {
        }

        class IncomeRepository {
        }

        class BudgetRepository {
        }

        class GoalRepository {
        }

        UserRepository ..|> IUserRepository
        ExpenseRepository ..|> IExpenseRepository
        IncomeRepository ..|> IIncomeRepository
        BudgetRepository ..|> IBudgetRepository
        GoalRepository ..|> IGoalRepository
    }

    package "Validators" {
        class UserValidator {
            +void Validate(User user)
        }

        class ExpenseValidator {
            +void Validate(Expense expense)
        }

        class IncomeValidator {
            +void Validate(Income income)
        }

        class BudgetValidator {
            +void Validate(Budget budget)
        }

        class GoalValidator {
            +void Validate(Goal goal)
        }

        UserValidator ..|> IUserValidator
        ExpenseValidator ..|> IExpenseValidator
        IncomeValidator ..|> IIncomeValidator
        BudgetValidator ..|> IBudgetValidator
        GoalValidator ..|> IGoalValidator
    }

    package "Utils" {
        class Encryptor {
        }

        class TokenHandler {
        }

        class EmailNotificator {
            +void NotifyUser(User user, string message)
        }

        EmailNotificator ..|> IUserNotificator
        TokenHandler ..|> ITokenHandler
        Encryptor ..|> IEncryptor
    }

    package "Services" {
        class AuthenticationService {
            -IUserRepository userRepository
            -IUserValidator userValidator
            -ITokenHandler tokenHandler
            -IEncryptor encryptor

            +void Register(string name, string email, string password)
            +string Login(string email, string password)
        }

        class UserManagementService {
            -IUserRepository userRepository
            -IUserValidator userValidator
            -ITokenHandler tokenHandler
            -IEncryptor encryptor

            +void ResetPassword(string email, string newPassword)
            +void EditProfile(Guid userId, string newName, string newEmail, string newPassword)
        }

        class ExpenseService {
            -IExpenseRepository expenseRepository
            -IExpenseValidator expenseValidator

            +void AddExpense(Expense expense)
            +void UpdateExpense(Expense expense)
            +void DeleteExpense(Guid expenseId)
            +Expense GetExpenseById(Guid expenseId)
            +List<Expense> GetExpensesByCategory(string category)
            +List<Expense> GetExpensesByDateRange(DateTime start, DateTime end)
        }

        class IncomeService {
            -IIncomeRepository incomeRepository
            -IIncomeValidator incomeValidator

            +void AddIncome(Income income)
            +void UpdateIncome(Income income)
            +void DeleteIncome(Guid incomeId)
            +Income GetIncomeById(Guid incomeId)
            +List<Income> GetIncomesBySource(string source)
            +List<Income> GetIncomesByDateRange(DateTime start, DateTime end)
        }

        class BudgetService {
            -IBudgetRepository budgetRepository
            -IBudgetValidator budgetValidator
            -IUserNotificator userNotificator

            +void AddBudget(Budget budget)
            +void UpdateBudget(Budget budget)
            +void DeleteBudget(Guid budgetId)
            +Budget GetCurrentBudget()
            +Budget GetByMonth(DateTime month)
            +List<Budget> FilterByAmountRange(decimal minAmount, decimal maxAmount)
        }

        class GoalService {
            -IGoalRepository goalRepository
            -IGoalValidator goalValidator
            -IUserNotificator userNotificator

            +void AddGoal(Goal goal)
            +void UpdateGoal(Goal goal)
            +void DeleteGoal(Guid goalId)
            +void GetCurrentGoals()
            +List<Goal> FilterByAmountRange(decimal minGoal, decimal maxGoal)
        }

        class RecurringExpenseService {
            -IExpenseRepository expenseRepository
            -IExpenseValidator expenseValidator

            +void AddRecurringExpense(Expense expense)
            +void UpdateRecurringExpense(Expense expense)
            +void DeleteRecurringExpense(Guid expenseId)
            +void CalculateRecurringExpense()
        }

        BudgetService *-- IBudgetRepository
        BudgetService *-- IBudgetValidator
        BudgetService *-- IUserNotificator

        GoalService *-- IGoalRepository
        GoalService *-- IGoalValidator
        GoalService *-- IUserNotificator

        RecurringExpenseService *-- IExpenseRepository
        RecurringExpenseService *-- IExpenseValidator

        ExpenseService *-- IExpenseRepository
        ExpenseService *-- IExpenseValidator
        IncomeService *-- IIncomeRepository
        IncomeService *-- IIncomeValidator

        AuthenticationService *-- IUserRepository
        AuthenticationService *-- IUserValidator
        AuthenticationService *-- ITokenHandler
        AuthenticationService *-- IEncryptor

        UserManagementService *-- IUserRepository
        UserManagementService *-- IUserValidator
        UserManagementService *-- ITokenHandler
        UserManagementService *-- IEncryptor
    }
}

@enduml
