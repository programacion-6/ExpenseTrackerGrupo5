@startuml ExpenseTracker - Group5

package "DOMAIN LAYER" {

    package "Entities" {
        interface EntityBase {
            +Guid Id
        }

        class User implements EntityBase {
            +string Name
            +string Email
            +string PasswordHash
            +DateTime CreatedAt
        }

        class Expense implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal Amount
            +string Description
            +string Category
            +DateTime Date
            +DateTime CreatedAt
        }

        class RecurrentExpense extends Expense {
            +DateTime LastCalculation
        }

        class Income implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal Amount
            +string Source
            +DateTime Date
            +DateTime CreatedAt
        }

        class Budget implements EntityBase {
            +Guid UserId
            +DateTime Month
            +string Currency
            +decimal Amount
            +decimal CurrentAmount
        }

        class Goal implements EntityBase {
            +Guid UserId
            +string Currency
            +decimal GoalAmount
            +DateTime Deadline
            +decimal CurrentAmount
            +DateTime CreatedAt
        }

    }

    package "DTOs" {

        package "User DTOs" {
            class CreateUserRequest {
                +string Name
                +string Email
                +string Password
            }

            class AuthResponse {
                +string Token
                +DateTime ExpiresAt
            }

            class UpdateUserRequest {
                +string Name
                +string Email
                +string Password
            }

            class UserResponse {
                +Guid Id
                +string Name
                +string Email
                +DateTime CreatedAt
            }
        }

        package "Expense DTOs" {
            class CreateExpenseRequest {
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
            }

            class ExpenseResponse {
                +Guid Id
                +Guid UserId
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
                +DateTime CreatedAt
            }

            class UpdateExpenseRequest {
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
            }
        }

        package "Recurrent Expense DTOs" {
            class CreateRecurrentExpenseRequest {
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
            }

            class UpdateRecurrentExpenseRequest {
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
            }

            class RecurrentExpenseResponse {
                +Guid Id
                +Guid UserId
                +string Currency
                +decimal Amount
                +string Description
                +string Category
                +DateTime Date
                +DateTime CreatedAt
            }
        }

        package "Income DTOs" {
            class CreateIncomeRequest {
                +string Currency
                +decimal Amount
                +string Source
                +DateTime Date
            }

            class IncomeResponse {
                +Guid Id
                +Guid UserId
                +string Currency
                +decimal Amount
                +string Source
                +DateTime Date
                +DateTime CreatedAt
            }

            class UpdateIncomeRequest {
                +string Currency
                +decimal Amount
                +string Source
                +DateTime Date
            }
        }

        package "Budget DTOs" {
            class CreateBudgetRequest {
                +string Currency
                +decimal Amount
            }

            class UpdateBudgetRequest {
                +string Currency
                +decimal Amount
            }

            class BudgetResponse {
                +Guid Id
                +Guid UserId
                +string Currency
                +decimal Amount
                +decimal CurrentAmount
                +DateTime Month
            }
        }

        package "Goal DTOs" {
            class CreateGoalRequest {
                +decimal GoalAmount
                +DateTime Deadline
                +string Currency
            }

            class UpdateGoalRequest {
                +decimal GoalAmount
                +DateTime Deadline
                +string Currency
            }

            class GoalResponse {
                +Guid Id
                +Guid UserId
                +string Currency
                +decimal GoalAmount
                +decimal CurrentAmount
                +DateTime Deadline
                +DateTime CreatedAt
            }
        }

        package "Report DTOs" {
            class MonthlySummary {
                +decimal TotalIncome
                +decimal TotalExpenses
                +decimal RemainingBudget
                +string HighestSpendingCategory
                +string Currency
            }

            class ExpenseInsightsResponse {
                +decimal TotalExpenses
                +string HighestSpendingCategory
                +DateTime MostExpensiveMonth
                +string Currency
            }
        }
    }

    package "Repositories" {
        interface IRepository<T implements EntityBase> {
            +bool Save(T item)
            +bool Update(T item)
            +bool Delete(T item)
            +T GetById(Guid itemId)
            +List<T> GetAll()
        }

        interface IUserRepository extends IRepository<User> {
            +User GetByEmail(string email)
        }

        interface IExpenseRepository extends IRepository<Expense> {
            +List<Expense> GetUserExpenseByDateRange(Guid userId, DateTime startDate, DateTime endDate)
            +List<Expense> GetUserExpenseByCategory(Guid userId, string category)
        }

        interface IRecurrentExpenseRepository extends IRepository<RecurrentExpense> {
            +List<RecurrentExpense> GetUserRecurrentExpensesByMonth(Guid userId, DateTime month)
        }

        interface IIncomeRepository extends IRepository<Income> {
            +List<Income> GetUserIncomeBySource(Guid userId, string source)
        }

        interface IBudgetRepository extends IRepository<Budget> {
            +Budget GetUserBudgetByMonth(Guid userId, DateTime month)
        }

        interface IGoalRepository extends IRepository<Goal> {
            +List<Goal> GetActiveUserGoals(Guid userId)
        }
    }

    package "Utils" {
        class IEncryptor {
            + Encrypt(string text)
            + Decrypt(string text)
        }

        interface ITokenHandler {
            +string GenerateToken(User user)
        }

        interface IUserNotifier {
            +void NotifyUser(User user, string message)
        }
    }

    package "Mappers" {
        interface IMapper<TSource, TDestination> {
            +TDestination Map(TSource source)
        }
    }

    package "Services" {
        interface IAuthenticationService {
            +void Register(string name, string email, string password)
            +string Login(string email, string password)
        }

        interface IUserManagementService {
            +void ResetPassword(string email, string newPassword)
            +void EditProfile(Guid userId, string newName, string newEmail, string newPassword)
        }

        interface IExpenseService {
            +void AddUserExpense(Expense expense)
            +void UpdateUserExpense(Expense expense)
            +void DeleteUserExpense(Guid userId, Guid expenseId)
            +Expense GetUserExpenseById(Guid userId, Guid expenseId)
            +List<Expense> GetUserExpensesByCategory(Guid userId, string category)
            +List<Expense> GetUserExpensesByDateRange(Guid userId, DateTime start, DateTime end)
        }

        interface IRecurrentExpenseService {
            +void AddUserRecurrentExpense(RecurrentExpense expense)
            +void UpdateUserRecurrentExpense(RecurrentExpense expense)
            +void DeleteUserRecurrentExpense(Guid userId, Guid expenseId)
            +void CalculateUserRecurrentExpenseMonthly(Guid userId)
        }

        interface IIncomeService {
            +void AddUserIncome(Income income)
            +void UpdateUserIncome(Income income)
            +void DeleteUserIncome(Guid userId, Guid incomeId)
            +Income GetUserIncomeById(Guid userId, Guid incomeId)
            +List<Income> GetUserIncomesBySource(Guid userId, string source)
        }

        interface IBudgetService {
            +void AddUserBudget(Budget budget)
            +void UpdateUserBudget(Budget budget)
            +void DeleteCurrentUserBudget(Guid userId, Guid budgetId)
            +Budget GetCurrentUserBudget(Guid userId)
            +Budget GetUserBudgetByMonth(Guid userId, DateTime month)
        }

        interface IGoalService {
            +void AddUserGoal(Goal goal)
            +void UpdateUserGoal(Goal goal)
            +void DeleteUserGoal(Guid userId, Guid goalId)
            +void GetActiveUserGoals(Guid userId)
        }

        interface IReportService {
            +MonthlySummaryResponse GetUserMonthlySummary(Guid userId)
            +ExpenseInsightsResponse GetUserExpenseInsightsResponse(Guid userId)
        }
    }

}

package "APLICATION LAYER" {
    package "Repositories" {
        class UserRepository {
        }

        class ExpenseRepository {
        }

        class IncomeRepository {
        }

        class BudgetRepository {
        }

        class GoalRepository {
        }

        UserRepository ..|> IUserRepository
        ExpenseRepository ..|> IExpenseRepository
        IncomeRepository ..|> IIncomeRepository
        BudgetRepository ..|> IBudgetRepository
        GoalRepository ..|> IGoalRepository
    }

    package "Utils" {
        class Encryptor {
        }

        class TokenHandler {
        }

        class EmailNotificator {
            +void NotifyUser(User user, string message)
        }

        EmailNotificator ..|> IUserNotifier
        TokenHandler ..|> ITokenHandler
        Encryptor ..|> IEncryptor
    }

    package "Mappers" {

        package "User Mappers" {
            class CreateUserRequestMapper {
                +User Map(CreateUserRequest dto)
            }

            class UpdateUserRequestMapper {
                +User Map(UpdateUserRequest dto)
            }

            class UserResponseMapper {
                +UserResponse Map(User entity)
            }

            class AuthResponseMapper {
                +AuthResponse Map(AuthData data)
            }
        }

        CreateUserRequestMapper ..|> IMapper
        UserResponseMapper ..|> IMapper
        UpdateUserRequestMapper ..|> IMapper
        AuthResponse ..|> IMapper

        package "Expense Mappers" {
            class CreateExpenseRequestMapper {
                +Expense Map(CreateExpenseRequest dto)
            }

            class UpdateExpenseRequestMapper {
                +Expense Map(UpdateExpenseRequest dto)
            }

            class ExpenseResponseMapper {
                +ExpenseResponse Map(Expense entity)
            }

            CreateExpenseRequestMapper ..|> IMapper
            UpdateExpenseRequestMapper ..|> IMapper
            ExpenseResponseMapper ..|> IMapper
        }

        package "Recurrent Expense Mappers" {
            class CreateRecurrentExpenseRequestMapper {
                +RecurrentExpense Map(CreateRecurrentExpenseRequest dto)
            }

            class UpdateRecurrentExpenseRequestMapper {
                +RecurrentExpense Map(UpdateRecurrentExpenseRequest dto)
            }

            class RecurrentExpenseResponseMapper {
                +RecurrentExpenseResponse Map(RecurrentExpense entity)
            }

            CreateRecurrentExpenseRequestMapper ..|> IMapper
            UpdateRecurrentExpenseRequestMapper ..|> IMapper
            RecurrentExpenseResponseMapper ..|> IMapper
        }

        package "Income Mappers" {
            class CreateIncomeRequestMapper {
                +Income Map(CreateIncomeRequest dto)
            }

            class UpdateIncomeRequestMapper {
                +Income Map(UpdateIncomeRequest dto)
            }

            class IncomeResponseMapper {
                +IncomeResponse Map(Income entity)
            }

            CreateIncomeRequestMapper ..|> IMapper
            UpdateIncomeRequestMapper ..|> IMapper
            IncomeResponseMapper ..|> IMapper
        }

        package "Budget Mappers" {
            class CreateBudgetRequestMapper {
                +Budget Map(CreateBudgetRequest dto)
            }

            class UpdateBudgetRequestMapper {
                +Budget Map(UpdateBudgetRequest dto)
            }

            class BudgetResponseMapper {
                +BudgetResponse Map(Budget entity)
            }
            CreateBudgetRequestMapper ..|> IMapper
            UpdateBudgetRequestMapper ..|> IMapper
            BudgetResponseMapper ..|> IMapper
        }

        package "Goal Mappers" {
            class CreateGoalRequestMapper {
                +Goal Map(CreateGoalRequest dto)
            }

            class UpdateGoalRequestMapper {
                +Goal Map(UpdateGoalRequest dto)
            }

            class GoalResponseMapper {
                +GoalResponse Map(Goal entity)
            }

            CreateGoalRequestMapper ..|> IMapper
            UpdateGoalRequestMapper ..|> IMapper
            GoalResponseMapper ..|> IMapper
        }
    }

    package "Services" {
        class AuthenticationService {
            -IUserRepository userRepository
            -ITokenHandler tokenHandler
            -IEncryptor encryptor
        }

        AuthenticationService ..|> IAuthenticationService
        AuthenticationService *-- IUserRepository
        AuthenticationService *-- ITokenHandler
        AuthenticationService *-- IEncryptor

        class UserManagementService {
            -IUserRepository userRepository
            -ITokenHandler tokenHandler
            -IEncryptor encryptor
            -IUserNotifier userNotifier
        }

        UserManagementService ..|> IUserManagementService
        UserManagementService *-- IUserRepository
        UserManagementService *-- ITokenHandler
        UserManagementService *-- IEncryptor
        UserManagementService *-- IUserNotifier

        class ExpenseService {
            -IExpenseRepository expenseRepository
        }

        ExpenseService ..|> IExpenseService
        ExpenseService *-- IExpenseRepository

        class RecurrentExpenseService {
            -IRecurrentExpenseRepository expenseRepository
        }

        RecurrentExpenseService ..|> IRecurrentExpenseService
        RecurrentExpenseService *-- IRecurrentExpenseRepository

        class IncomeService {
            -IIncomeRepository incomeRepository
        }

        IncomeService ..|> IIncomeService
        IncomeService *-- IIncomeRepository

        class BudgetService {
            -IBudgetRepository budgetRepository
            -IUserNotifier userNotificator
        }

        BudgetService ..|> IBudgetService
        BudgetService *-- IBudgetRepository
        BudgetService *-- IUserNotifier

        class GoalService {
            -IGoalRepository goalRepository
            -IUserNotifier userNotificator
        }

        GoalService ..|> IGoalService
        GoalService *-- IGoalRepository
        GoalService *-- IUserNotifier

        class ReportService {
            -IExpenseRepository expenseRepository
            -IRecurrentExpenseRepository recurrentExpenseRepository
            -IBudgetRepository budgetRepository
        }

        ReportService ..|> IReportService
        ReportService *-- IExpenseRepository
        ReportService *-- IRecurrentExpenseRepository
        ReportService *-- IBudgetRepository
    }
}

package "PRESENTATION LAYER" {

    class AuthController {
        -AuthenticationService authService
        -UserManagementService userManagementService
        -CreateUserRequestMapper createUserMapper
        -UserResponseMapper userResponseMapper

        +string Register(CreateUserRequest request)
        +string Login(string email, string password)
        +void ResetPassword(string email)
        +void VerifyPasswordReset(string code, string email, string password)
    }

    class UserController {
        -UserManagementService userManagementService
        -UpdateUserRequestMapper updateUserMapper
        -UserResponseMapper userResponseMapper

        +void UpdateProfile(UpdateUserRequest request)
    }

    class ExpenseController {
        -ExpenseService expenseService
        -CreateExpenseRequestMapper createExpenseMapper
        -UpdateExpenseRequestMapper updateExpenseMapper
        -ExpenseResponseMapper expenseResponseMapper

        +void CreateExpense(CreateExpenseRequest request)
        +List<ExpenseResponse> GetExpenses(DateTime? startDate, DateTime? endDate, string? category)
        +ExpenseResponse GetExpenseById(Guid id)
        +void UpdateExpense(Guid id, UpdateExpenseRequest request)
        +void DeleteExpense(Guid id)
    }

    class IncomeController {
        -IncomeService incomeService
        -CreateIncomeRequestMapper createIncomeMapper
        -UpdateIncomeRequestMapper updateIncomeMapper
        -IncomeResponseMapper incomeResponseMapper

        +void CreateIncome(CreateIncomeRequest request)
        +List<IncomeResponse> GetIncomes()
        +IncomeResponse GetIncomeById(Guid id)
        +void UpdateIncome(Guid id, UpdateIncomeRequest request)
        +void DeleteIncome(Guid id)
    }

    class BudgetController {
        -BudgetService budgetService
        -CreateBudgetRequestMapper createBudgetMapper
        -BudgetResponseMapper budgetResponseMapper

        +void AddBudget(CreateBudgetRequest request)
        +BudgetResponse GetCurrentBudget()
        +BudgetResponse GetBudgetByMonth(string month)
    }

    class SummaryController {
        -ExpenseService expenseService
        -IncomeService incomeService

        +MonthlySummaryResponse GetMonthlySummary()
        +ExpenseInsightsResponse GetExpenseInsightsResponse()
    }

    class GoalController {
        -GoalService goalService
        -CreateGoalRequestMapper createGoalMapper
        -GoalResponseMapper goalResponseMapper

        +void CreateGoal(CreateGoalRequest request)
        +List<GoalResponse> GetGoals()
    }

    AuthController --> AuthenticationService
    AuthController --> UserManagementService
    AuthController --> CreateUserRequestMapper
    AuthController --> UserResponseMapper

    UserController --> UserManagementService
    UserController --> UpdateUserRequestMapper
    UserController --> UserResponseMapper

    ExpenseController --> ExpenseService
    ExpenseController --> CreateExpenseRequestMapper
    ExpenseController --> UpdateExpenseRequestMapper
    ExpenseController --> ExpenseResponseMapper

    IncomeController --> IncomeService
    IncomeController --> CreateIncomeRequestMapper
    IncomeController --> UpdateIncomeRequestMapper
    IncomeController --> IncomeResponseMapper

    BudgetController --> BudgetService
    BudgetController --> CreateBudgetRequestMapper
    BudgetController --> BudgetResponseMapper

    SummaryController --> ExpenseService
    SummaryController --> IncomeService

    GoalController --> GoalService
    GoalController --> CreateGoalRequestMapper
    GoalController --> GoalResponseMapper

}


@enduml
